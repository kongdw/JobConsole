<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	    http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	    http://www.springframework.org/schema/jee
	    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context-3.0.xsd
	    http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>/WEB-INF/config/jdbc.properties</value>
            </list>
        </property>
    </bean>
    <!--&lt;!&ndash; dataSource &ndash;&gt;-->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <!--<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver"/>-->
    <!--<property name="url" value="jdbc:derby:/Users/irock/Documents/Working/db/etldb;create=true"/>-->
    <!--</bean>-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="autoCommitOnClose" value="true"/>
        <property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
        <property name="initialPoolSize" value="${cpool.minPoolSize}"/>
        <property name="minPoolSize" value="${cpool.minPoolSize}"/>
        <property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
        <property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
        <property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
        <property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
    </bean>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--<tx:annotation-driven/>-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution(* cn.com.cis.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod"/>
    </aop:config>


    <!-- enable component scanning and autowire (beware that this does not enable mapper scanning!) -->
    <context:component-scan base-package="cn.com.cis"/>
    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven/>

    <!--<aop:aspectj-autoproxy/>-->

    <!--<context:component-scan base-package="net.vicp.irock.core.task">-->
    <!--<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect" />-->
    <!--</context:component-scan>-->

    <!--define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="cn.com.cis.domain"/>
        <property name="plugins">
            <list>
                <ref bean="paginationInterceptor"/>
            </list>
        </property>
    </bean>
    <!-- Mybatis 分页插件配置 -->
    <bean id="paginationInterceptor" class="cn.com.cis.plugins.mybatis.PageHelper">
        <property name="properties">
            <props>
                <prop key="dialect">mysql</prop>
                <!-- 该参数默认为false -->
                <!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
                <!-- 和startPage中的pageNum效果一样-->
                <prop key="offsetAsPageNum">true</prop>
                <!-- 该参数默认为false -->
                <!-- 设置为true时，使用RowBounds分页会进行count查询 -->
                <prop key="rowBoundsWithCount">true</prop>
                <!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
                <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
                <prop key="pageSizeZero">true</prop>
                <!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
                <!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
                <!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
                <prop key="reasonable">true</prop>
            </props>
        </property>
    </bean>
    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.com.cis.persistence"/>
    </bean>
</beans>